{"ast":null,"code":"var _jsxFileName = \"/home/oscar/M\\xFAsica/Hidroponia/frontend/src/api/weatherComponent.jsx\",\n  _s = $RefreshSig$();\n// WeatherComponent.jsx\n\nimport React, { useState, useEffect } from 'react'; // Importar React y los hooks useState y useEffect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherComponent() {\n  _s();\n  const [weatherData, setWeatherData] = useState(null); // Definir el estado para almacenar los datos del clima\n\n  useEffect(() => {\n    // Efecto para cargar los datos del clima al montar el componente\n    async function fetchWeatherData(latitude, longitude) {\n      // Función asincrónica para realizar la solicitud de los datos del clima\n      try {\n        const apiKey = 'fc2ac51668f9a6669c5870bdcc61e018'; // Clave de API para acceder a OpenWeatherMap\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`); // Realizar solicitud GET a la API de OpenWeatherMap\n        if (!response.ok) {\n          // Verificar si la respuesta de la red es correcta\n          throw new Error('Network response was not ok'); // Lanzar un error si la respuesta no es correcta\n        }\n        const data = await response.json(); // Convertir la respuesta a formato JSON\n        setWeatherData(data); // Actualizar el estado con los datos del clima\n      } catch (error) {\n        console.error('Error fetching weather data:', error); // Manejar cualquier error que ocurra durante la solicitud de los datos del clima\n      }\n    }\n    function getLocation() {\n      // Función para obtener la ubicación actual del usuario\n      if (navigator.geolocation) {\n        // Verificar si el navegador soporta la geolocalización\n        navigator.geolocation.getCurrentPosition(position => {\n          // Obtener la posición actual del usuario\n          const latitude = position.coords.latitude; // Obtener la latitud\n          const longitude = position.coords.longitude; // Obtener la longitud\n          fetchWeatherData(latitude, longitude); // Llamar a la función para cargar los datos del clima con la ubicación obtenida\n        }, error => {\n          console.error('Error getting geolocation:', error); // Manejar cualquier error que ocurra al obtener la geolocalización del usuario\n        });\n      } else {\n        console.error('Geolocation is not supported by this browser.'); // Mostrar un mensaje de error si la geolocalización no es compatible con el navegador\n      }\n    }\n    getLocation(); // Llamar a la función para obtener la ubicación actual al montar el componente\n  }, []); // Dependencia vacía para que el efecto se ejecute solo una vez al montar el componente\n\n  return (\n    /*#__PURE__*/\n    // Renderizar el componente\n    _jsxDEV(\"div\", {\n      className: \"container justify-content:flex\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-0 left-0 p-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"shadow-2xl w-1/2 p-4\",\n          children: weatherData ?\n          /*#__PURE__*/\n          // Mostrar los datos del clima si están disponibles\n          _jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-black text-xl font-semibold mb-2\",\n              children: [\"Clima en \", weatherData.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Temperatura: \", weatherData.main.temp, \"\\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Clima: \", weatherData.weather[0].description]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this) // Mostrar un mensaje de carga si los datos del clima aún no están disponibles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(WeatherComponent, \"BCUo9muHyxrqajg6diFxqqqjG/A=\");\n_c = WeatherComponent;\nexport default WeatherComponent; // Exportar el componente WeatherComponent\nvar _c;\n$RefreshReg$(_c, \"WeatherComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherComponent","_s","weatherData","setWeatherData","fetchWeatherData","latitude","longitude","apiKey","response","fetch","ok","Error","data","json","error","console","getLocation","navigator","geolocation","getCurrentPosition","position","coords","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","main","temp","weather","description","_c","$RefreshReg$"],"sources":["/home/oscar/Música/Hidroponia/frontend/src/api/weatherComponent.jsx"],"sourcesContent":["// WeatherComponent.jsx\r\n\r\nimport React, { useState, useEffect } from 'react'; // Importar React y los hooks useState y useEffect\r\n\r\nfunction WeatherComponent() {\r\n  const [weatherData, setWeatherData] = useState(null); // Definir el estado para almacenar los datos del clima\r\n\r\n  useEffect(() => {\r\n    // Efecto para cargar los datos del clima al montar el componente\r\n    async function fetchWeatherData(latitude, longitude) {\r\n      // Función asincrónica para realizar la solicitud de los datos del clima\r\n      try {\r\n        const apiKey = 'fc2ac51668f9a6669c5870bdcc61e018'; // Clave de API para acceder a OpenWeatherMap\r\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`); // Realizar solicitud GET a la API de OpenWeatherMap\r\n        if (!response.ok) {\r\n          // Verificar si la respuesta de la red es correcta\r\n          throw new Error('Network response was not ok'); // Lanzar un error si la respuesta no es correcta\r\n        }\r\n        const data = await response.json(); // Convertir la respuesta a formato JSON\r\n        setWeatherData(data); // Actualizar el estado con los datos del clima\r\n      } catch (error) {\r\n        console.error('Error fetching weather data:', error); // Manejar cualquier error que ocurra durante la solicitud de los datos del clima\r\n      }\r\n    }\r\n\r\n    function getLocation() {\r\n      // Función para obtener la ubicación actual del usuario\r\n      if (navigator.geolocation) {\r\n        // Verificar si el navegador soporta la geolocalización\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            // Obtener la posición actual del usuario\r\n            const latitude = position.coords.latitude; // Obtener la latitud\r\n            const longitude = position.coords.longitude; // Obtener la longitud\r\n            fetchWeatherData(latitude, longitude); // Llamar a la función para cargar los datos del clima con la ubicación obtenida\r\n          },\r\n          (error) => {\r\n            console.error('Error getting geolocation:', error); // Manejar cualquier error que ocurra al obtener la geolocalización del usuario\r\n          }\r\n        );\r\n      } else {\r\n        console.error('Geolocation is not supported by this browser.'); // Mostrar un mensaje de error si la geolocalización no es compatible con el navegador\r\n      }\r\n    }\r\n\r\n    getLocation(); // Llamar a la función para obtener la ubicación actual al montar el componente\r\n  }, []); // Dependencia vacía para que el efecto se ejecute solo una vez al montar el componente\r\n\r\n  return (\r\n    // Renderizar el componente\r\n    <div className=\"container justify-content:flex\">\r\n      <div className=\"top-0 left-0 p-4\">\r\n        <div className=\"shadow-2xl w-1/2 p-4\">\r\n          {weatherData ? ( // Mostrar los datos del clima si están disponibles\r\n            <div className=\"text-center\">\r\n              <h2 className=\"text-black text-xl font-semibold mb-2\">Clima en {weatherData.name}</h2> {/* Mostrar el nombre de la ubicación */}\r\n              <p>Temperatura: {weatherData.main.temp}°C</p> {/* Mostrar la temperatura */}\r\n              <p>Clima: {weatherData.weather[0].description}</p> {/* Mostrar la descripción del clima */}\r\n            </div>\r\n          ) : (\r\n            <div>Loading...</div> // Mostrar un mensaje de carga si los datos del clima aún no están disponibles\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherComponent; // Exportar el componente WeatherComponent\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}