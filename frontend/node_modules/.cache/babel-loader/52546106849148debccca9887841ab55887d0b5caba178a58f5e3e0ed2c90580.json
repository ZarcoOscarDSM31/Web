{"ast":null,"code":"var _jsxFileName = \"/home/oscar/M\\xFAsica/Hidroponia/frontend/src/components/tempYhumed.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport SensorContext from \"../context/sensorContext\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ApexChart = () => {\n  _s();\n  const sensorData = useContext(SensorContext);\n  const [series, setSeries] = useState([]);\n  const [options, setOptions] = useState({\n    chart: {\n      height: 500,\n      type: \"line\",\n      zoom: {\n        enabled: true\n      }\n    },\n    dataLabels: {\n      enabled: true\n    },\n    stroke: {\n      curve: \"straight\"\n    },\n    grid: {\n      row: {\n        colors: [\"#f3f3f3\", \"transparent\"],\n        opacity: 0.5\n      }\n    },\n    xaxis: {\n      categories: []\n    }\n  });\n  useEffect(() => {\n    if (!sensorData || sensorData.length === 0) return;\n    const dataByDate = {};\n    sensorData.forEach(item => {\n      const date = new Date(item.timestamp).toLocaleDateString();\n      if (!dataByDate[date]) {\n        dataByDate[date] = [];\n      }\n      dataByDate[date].push(item);\n    });\n    const averageTemperatureData = [];\n    const averageHumidityData = [];\n    for (const date in dataByDate) {\n      const temperatureValues = dataByDate[date].map(item => item.temperatureC);\n      const humidityValues = dataByDate[date].map(item => item.humidity);\n      const temperatureAverage = temperatureValues.reduce((acc, val) => acc + val, 0) / temperatureValues.length;\n      const humidityAverage = humidityValues.reduce((acc, val) => acc + val, 0) / humidityValues.length;\n      averageTemperatureData.push({\n        date,\n        average: Number(temperatureAverage.toFixed(2))\n      });\n      averageHumidityData.push({\n        date,\n        average: Number(humidityAverage.toFixed(2))\n      });\n    }\n    setSeries([{\n      name: \"Porcentaje de Humedad (Sensores)\",\n      data: averageHumidityData.map(item => item.average)\n    }, {\n      name: \"Temperatura (Sensores) (°C)\",\n      data: averageTemperatureData.map(item => item.average)\n    }]);\n    setOptions(prevOptions => ({\n      ...prevOptions,\n      xaxis: {\n        ...prevOptions.xaxis,\n        categories: averageTemperatureData.map(item => item.date)\n      }\n    }));\n  }, [sensorData]);\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      console.error(\"Geolocation is not supported by this browser.\");\n      return;\n    }\n    const fetchSensorData = async position => {\n      try {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        const apiKey = \"fc2ac51668f9a6669c5870bdcc61e018\";\n        const weatherApiUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;\n        const weatherResponse = await axios.get(weatherApiUrl);\n        const weatherData = weatherResponse.data;\n        const categories = [];\n        const maxTemperatures = {};\n        const minTemperatures = {};\n        weatherData.list.forEach(item => {\n          const timestamp = new Date(item.dt * 1000);\n          const date = timestamp.toLocaleDateString();\n          categories.push(date);\n          const temperature = Number(item.main.temp.toFixed(2));\n          if (!maxTemperatures[date] || temperature > maxTemperatures[date]) {\n            maxTemperatures[date] = temperature;\n          }\n          if (!minTemperatures[date] || temperature < minTemperatures[date]) {\n            minTemperatures[date] = temperature;\n          }\n        });\n        setSeries([{\n          name: \"Temperatura Máxima (API OpenWeatherMap) (°C)\",\n          data: Object.values(maxTemperatures)\n        }, {\n          name: \"Temperatura Mínima (API OpenWeatherMap) (°C)\",\n          data: Object.values(minTemperatures)\n        }]);\n        setOptions(prevOptions => ({\n          ...prevOptions,\n          xaxis: {\n            categories\n          }\n        }));\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      }\n    };\n    const getCurrentLocation = () => {\n      navigator.geolocation.getCurrentPosition(fetchSensorData, console.error);\n    };\n    getCurrentLocation();\n    const pollingInterval = setInterval(getCurrentLocation, 900000); // Cada 15 minutos\n\n    return () => clearInterval(pollingInterval);\n  }, []);\n  const handleChartTypeChange = event => {\n    const chartType = event.target.value;\n    setOptions(prevOptions => ({\n      ...prevOptions,\n      chart: {\n        ...prevOptions.chart,\n        type: chartType\n      }\n    }));\n    sessionStorage.setItem('chartType', chartType); // Guardar el tipo de gráfica en sessionStorage\n  };\n  const renderChartTypeSelect = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-end mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"mr-2 text-black font-semibold\",\n        children: \"Tipo de gr\\xE1fica:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"min-w-4 text-black\",\n        value: options.chart.type,\n        onChange: handleChartTypeChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"line\",\n          children: \"L\\xEDnea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"bar\",\n          children: \"Barras\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"area\",\n          children: \"Area\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  };\n  const renderChart = () => {\n    return /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: options,\n      series: series,\n      type: options.chart.type,\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderChartTypeSelect(), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chart\",\n      children: renderChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(ApexChart, \"Lx7LhXzE9NXkZVv107U25l3herA=\");\n_c = ApexChart;\nexport default ApexChart;\nvar _c;\n$RefreshReg$(_c, \"ApexChart\");","map":{"version":3,"names":["React","useContext","useEffect","useState","ReactApexChart","SensorContext","axios","jsxDEV","_jsxDEV","ApexChart","_s","sensorData","series","setSeries","options","setOptions","chart","height","type","zoom","enabled","dataLabels","stroke","curve","grid","row","colors","opacity","xaxis","categories","length","dataByDate","forEach","item","date","Date","timestamp","toLocaleDateString","push","averageTemperatureData","averageHumidityData","temperatureValues","map","temperatureC","humidityValues","humidity","temperatureAverage","reduce","acc","val","humidityAverage","average","Number","toFixed","name","data","prevOptions","navigator","geolocation","console","error","fetchSensorData","position","latitude","longitude","coords","apiKey","weatherApiUrl","weatherResponse","get","weatherData","maxTemperatures","minTemperatures","list","dt","temperature","main","temp","Object","values","getCurrentLocation","getCurrentPosition","pollingInterval","setInterval","clearInterval","handleChartTypeChange","event","chartType","target","value","sessionStorage","setItem","renderChartTypeSelect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","renderChart","id","_c","$RefreshReg$"],"sources":["/home/oscar/Música/Hidroponia/frontend/src/components/tempYhumed.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport SensorContext from \"../context/sensorContext\";\r\nimport axios from \"axios\";\r\n\r\nconst ApexChart = () => {\r\n  const sensorData = useContext(SensorContext);\r\n  const [series, setSeries] = useState([]);\r\n  const [options, setOptions] = useState({\r\n    chart: {\r\n      height: 500,\r\n      type: \"line\",\r\n      zoom: {\r\n        enabled: true,\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: true,\r\n    },\r\n    stroke: {\r\n      curve: \"straight\",\r\n    },\r\n    grid: {\r\n      row: {\r\n        colors: [\"#f3f3f3\", \"transparent\"],\r\n        opacity: 0.5,\r\n      },\r\n    },\r\n    xaxis: {\r\n      categories: [],\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!sensorData || sensorData.length === 0) return;\r\n    const dataByDate = {};\r\n    sensorData.forEach((item) => {\r\n      const date = new Date(item.timestamp).toLocaleDateString();\r\n      if (!dataByDate[date]) {\r\n        dataByDate[date] = [];\r\n      }\r\n      dataByDate[date].push(item);\r\n    });\r\n\r\n    const averageTemperatureData = [];\r\n    const averageHumidityData = [];\r\n    for (const date in dataByDate) {\r\n      const temperatureValues = dataByDate[date].map((item) => item.temperatureC);\r\n      const humidityValues = dataByDate[date].map((item) => item.humidity);\r\n      const temperatureAverage = temperatureValues.reduce((acc, val) => acc + val, 0) / temperatureValues.length;\r\n      const humidityAverage = humidityValues.reduce((acc, val) => acc + val, 0) / humidityValues.length;\r\n      averageTemperatureData.push({ date, average: Number(temperatureAverage.toFixed(2)) });\r\n      averageHumidityData.push({ date, average: Number(humidityAverage.toFixed(2)) });\r\n    }\r\n\r\n    setSeries([\r\n      {\r\n        name: \"Porcentaje de Humedad (Sensores)\",\r\n        data: averageHumidityData.map((item) => item.average),\r\n      },\r\n      {\r\n        name: \"Temperatura (Sensores) (°C)\",\r\n        data: averageTemperatureData.map((item) => item.average),\r\n      },\r\n    ]);\r\n\r\n    setOptions((prevOptions) => ({\r\n      ...prevOptions,\r\n      xaxis: {\r\n        ...prevOptions.xaxis,\r\n        categories: averageTemperatureData.map((item) => item.date),\r\n      },\r\n    }));\r\n  }, [sensorData]);\r\n\r\n  useEffect(() => {\r\n    if (!navigator.geolocation) {\r\n      console.error(\"Geolocation is not supported by this browser.\");\r\n      return;\r\n    }\r\n  \r\n    const fetchSensorData = async (position) => {\r\n      try {\r\n        const { latitude, longitude } = position.coords;\r\n        const apiKey = \"fc2ac51668f9a6669c5870bdcc61e018\";\r\n        const weatherApiUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;\r\n        const weatherResponse = await axios.get(weatherApiUrl);\r\n        const weatherData = weatherResponse.data;\r\n  \r\n        const categories = [];\r\n        const maxTemperatures = {};\r\n        const minTemperatures = {};\r\n  \r\n        weatherData.list.forEach((item) => {\r\n          const timestamp = new Date(item.dt * 1000);\r\n          const date = timestamp.toLocaleDateString();\r\n          categories.push(date);\r\n          const temperature = Number(item.main.temp.toFixed(2));\r\n  \r\n          if (!maxTemperatures[date] || temperature > maxTemperatures[date]) {\r\n            maxTemperatures[date] = temperature;\r\n          }\r\n          if (!minTemperatures[date] || temperature < minTemperatures[date]) {\r\n            minTemperatures[date] = temperature;\r\n          }\r\n        });\r\n  \r\n        setSeries([\r\n          {\r\n            name: \"Temperatura Máxima (API OpenWeatherMap) (°C)\",\r\n            data: Object.values(maxTemperatures),\r\n          },\r\n          {\r\n            name: \"Temperatura Mínima (API OpenWeatherMap) (°C)\",\r\n            data: Object.values(minTemperatures),\r\n          },\r\n        ]);\r\n  \r\n        setOptions((prevOptions) => ({\r\n          ...prevOptions,\r\n          xaxis: { categories },\r\n        }));\r\n      } catch (error) {\r\n        console.error(\"Error fetching weather data:\", error);\r\n      }\r\n    };\r\n  \r\n    const getCurrentLocation = () => {\r\n      navigator.geolocation.getCurrentPosition(fetchSensorData, console.error);\r\n    };\r\n  \r\n    getCurrentLocation();\r\n  \r\n    const pollingInterval = setInterval(getCurrentLocation, 900000); // Cada 15 minutos\r\n  \r\n    return () => clearInterval(pollingInterval);\r\n  }, []);\r\n\r\n  const handleChartTypeChange = (event) => {\r\n    const chartType = event.target.value;\r\n    setOptions((prevOptions) => ({\r\n      ...prevOptions,\r\n      chart: {\r\n        ...prevOptions.chart,\r\n        type: chartType,\r\n      },\r\n    }));\r\n    sessionStorage.setItem('chartType', chartType); // Guardar el tipo de gráfica en sessionStorage\r\n  };\r\n  const renderChartTypeSelect = () => {\r\n    return (\r\n      <div className=\"flex items-center justify-end mb-4\">\r\n        <label className=\"mr-2 text-black font-semibold\">Tipo de gráfica:</label>\r\n        <select\r\n          className=\"min-w-4 text-black\"\r\n          value={options.chart.type}\r\n          onChange={handleChartTypeChange}\r\n        >\r\n          <option value=\"line\">Línea</option>\r\n          <option value=\"bar\">Barras</option>\r\n          <option value=\"area\">Area</option>\r\n        </select>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderChart = () => {\r\n    return (\r\n      <ReactApexChart\r\n        options={options}\r\n        series={series}\r\n        type={options.chart.type}\r\n        height={350}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {renderChartTypeSelect()}\r\n      <div id=\"chart\">{renderChart()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ApexChart;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}