{"ast":null,"code":"var _jsxFileName = \"/home/oscar/M\\xFAsica/Hidroponia/frontend/src/components/aguaSensor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport SensorContext from \"../context/sensorContext\"; // Asegúrate de importar el contexto adecuadamente\nimport Chart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorDataDisplay = () => {\n  _s();\n  const sensorData = useContext(SensorContext);\n  if (!sensorData || sensorData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No hay datos disponibles del sensor.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Obtener el último registro de datos del sensor\n  const latestReading = sensorData[sensorData.length - 1];\n\n  // Valor del agua en el último registro\n  const waterLevel = latestReading.waterLevel;\n\n  // Configuración de la gráfica de ApexCharts\n  const chartOptions = {\n    chart: {\n      type: 'donut',\n      height: 250\n    },\n    labels: ['Agua', 'Espacio vacío']\n  };\n  const chartSeries = [waterLevel, 100 - waterLevel];\n\n  // Alerta cuando el tanque esté vacío\n  if (waterLevel === 0) {\n    alert('¡El tanque está vacío!');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Estado actual del agua:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: chartOptions,\n      series: chartSeries,\n      type: \"donut\",\n      width: \"300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorDataDisplay, \"zm6922gES9aI5y7+92hTA16rtqQ=\");\n_c = SensorDataDisplay;\nexport default SensorDataDisplay;\nvar _c;\n$RefreshReg$(_c, \"SensorDataDisplay\");","map":{"version":3,"names":["React","useContext","SensorContext","Chart","jsxDEV","_jsxDEV","SensorDataDisplay","_s","sensorData","length","children","fileName","_jsxFileName","lineNumber","columnNumber","latestReading","waterLevel","chartOptions","chart","type","height","labels","chartSeries","alert","options","series","width","_c","$RefreshReg$"],"sources":["/home/oscar/Música/Hidroponia/frontend/src/components/aguaSensor.jsx"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport SensorContext from \"../context/sensorContext\"; // Asegúrate de importar el contexto adecuadamente\r\nimport Chart from \"react-apexcharts\";\r\n\r\nconst SensorDataDisplay = () => {\r\n  const sensorData = useContext(SensorContext);\r\n\r\n  if (!sensorData || sensorData.length === 0) {\r\n    return <p>No hay datos disponibles del sensor.</p>;\r\n  }\r\n\r\n  // Obtener el último registro de datos del sensor\r\n  const latestReading = sensorData[sensorData.length - 1];\r\n\r\n  // Valor del agua en el último registro\r\n  const waterLevel = latestReading.waterLevel;\r\n\r\n  // Configuración de la gráfica de ApexCharts\r\n  const chartOptions = {\r\n    chart: {\r\n      type: 'donut',\r\n      height: 250, \r\n    },\r\n    labels: ['Agua', 'Espacio vacío'],\r\n  };\r\n\r\n  const chartSeries = [waterLevel, 100 - waterLevel];\r\n\r\n  // Alerta cuando el tanque esté vacío\r\n  if (waterLevel === 0) {\r\n    alert('¡El tanque está vacío!');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Estado actual del agua:</h2>\r\n      <Chart options={chartOptions} series={chartSeries} type=\"donut\" width=\"300\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SensorDataDisplay;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,aAAa,MAAM,0BAA0B,CAAC,CAAC;AACtD,OAAOC,KAAK,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,UAAU,GAAGP,UAAU,CAACC,aAAa,CAAC;EAE5C,IAAI,CAACM,UAAU,IAAIA,UAAU,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1C,oBAAOJ,OAAA;MAAAK,QAAA,EAAG;IAAoC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACpD;;EAEA;EACA,MAAMC,aAAa,GAAGP,UAAU,CAACA,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC;;EAEvD;EACA,MAAMO,UAAU,GAAGD,aAAa,CAACC,UAAU;;EAE3C;EACA,MAAMC,YAAY,GAAG;IACnBC,KAAK,EAAE;MACLC,IAAI,EAAE,OAAO;MACbC,MAAM,EAAE;IACV,CAAC;IACDC,MAAM,EAAE,CAAC,MAAM,EAAE,eAAe;EAClC,CAAC;EAED,MAAMC,WAAW,GAAG,CAACN,UAAU,EAAE,GAAG,GAAGA,UAAU,CAAC;;EAElD;EACA,IAAIA,UAAU,KAAK,CAAC,EAAE;IACpBO,KAAK,CAAC,wBAAwB,CAAC;EACjC;EAEA,oBACElB,OAAA;IAAAK,QAAA,gBACEL,OAAA;MAAAK,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChCT,OAAA,CAACF,KAAK;MAACqB,OAAO,EAAEP,YAAa;MAACQ,MAAM,EAAEH,WAAY;MAACH,IAAI,EAAC,OAAO;MAACO,KAAK,EAAC;IAAK;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEV,CAAC;AAACP,EAAA,CAnCID,iBAAiB;AAAAqB,EAAA,GAAjBrB,iBAAiB;AAqCvB,eAAeA,iBAAiB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}