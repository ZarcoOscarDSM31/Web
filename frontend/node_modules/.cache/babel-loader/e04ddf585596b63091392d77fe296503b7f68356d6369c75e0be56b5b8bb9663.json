{"ast":null,"code":"var _jsxFileName = \"/home/oscar/M\\xFAsica/Hidroponia/frontend/src/context/sensorContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { getSensor } from \"../api/sensor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorContext = /*#__PURE__*/createContext();\nexport const SensorProvider = ({\n  children\n}) => {\n  _s();\n  const [sensorData, setSensorData] = useState(null);\n  const fetchSensorData = async () => {\n    try {\n      const data = await getSensor(); // Llama a la función getSensor para obtener los datos\n      setSensorData(data);\n    } catch (error) {\n      console.error(\"Error fetching sensor data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchSensorData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SensorContext.Provider, {\n    value: sensorData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(SensorProvider, \"b5axGbR/lRweVIVqXNxgJ0XLyYk=\");\n_c = SensorProvider;\nexport default SensorContext;\nvar _c;\n$RefreshReg$(_c, \"SensorProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","getSensor","jsxDEV","_jsxDEV","SensorContext","SensorProvider","children","_s","sensorData","setSensorData","fetchSensorData","data","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/oscar/Música/Hidroponia/frontend/src/context/sensorContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport { getSensor } from \"../api/sensor\";\r\n\r\nconst SensorContext = createContext();\r\n\r\nexport const SensorProvider = ({ children }) => {\r\n    const [sensorData, setSensorData] = useState(null);\r\n\r\n    const fetchSensorData = async () => {\r\n        try {\r\n            const data = await getSensor(); // Llama a la función getSensor para obtener los datos\r\n            setSensorData(data);\r\n        } catch (error) {\r\n            console.error(\"Error fetching sensor data:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchSensorData();\r\n    }, []);\r\n\r\n    return (\r\n        <SensorContext.Provider value={sensorData}>\r\n            {children}\r\n        </SensorContext.Provider>\r\n    );\r\n};\r\n\r\nexport default SensorContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,SAAS,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,aAAa,gBAAGN,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMO,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMW,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACA,MAAMC,IAAI,GAAG,MAAMV,SAAS,CAAC,CAAC,CAAC,CAAC;MAChCQ,aAAa,CAACE,IAAI,CAAC;IACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACJ,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACZU,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIP,OAAA,CAACC,aAAa,CAACU,QAAQ;IAACC,KAAK,EAAEP,UAAW;IAAAF,QAAA,EACrCA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAEjC,CAAC;AAACZ,EAAA,CArBWF,cAAc;AAAAe,EAAA,GAAdf,cAAc;AAuB3B,eAAeD,aAAa;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}